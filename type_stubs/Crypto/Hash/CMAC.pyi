from types import ModuleType
from typing import Union, Optional

digest_size: int

class CMAC(object):
    digest_size: int

    def __init__(self, key: Union[bytes, bytearray, memoryview], msg: Union[bytes, bytearray, memoryview], ciphermod: ModuleType, cipher_params: dict, mac_len: int) -> None: ...
    def update(self, msg: Union[bytes, bytearray, memoryview]) -> CMAC: ...
    def copy(self) -> CMAC: ...
    def digest(self) -> bytes: ...
    def hexdigest(self) -> str: ...
    def verify(self, mac_tag: Union[bytes, bytearray, memoryview]) -> None: ...
    def hexverify(self, hex_mac_tag: str) -> None: ...

def new(key: Union[bytes, bytearray, memoryview], msg: Optional[Union[bytes, bytearray, memoryview]]=None, ciphermod: Optional[ModuleType]=None, cipher_params: Optional[dict]=None, mac_len: Optional[int]=None) -> CMAC: ...
