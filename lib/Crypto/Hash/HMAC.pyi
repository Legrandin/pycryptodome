from types import ModuleType
from typing import Union, Optional

__all__ = ['new', 'HMAC']


class HMAC:
    digest_size: int
    def __init__(self, key: Union[bytes, bytearray, memoryview], msg: Optional[Union[bytes, bytearray, memoryview]]=b"", digestmod: Optional[ModuleType]=None) -> None: ...
    def update(self, msg: Union[bytes, bytearray, memoryview]) -> HMAC: ...
    def copy(self) -> HMAC: ...
    def digest(self) -> bytes: ...
    def verify(self, mac_tag: Union[bytes, bytearray, memoryview]) -> None: ...
    def hexdigest(self) -> str: ...
    def hexverify(self, hex_mac_tag: str) -> None: ...

def new(key: Union[bytes, bytearray, memoryview], msg: Optional[Union[bytes, bytearray, memoryview]]=b"", digestmod: Optional[ModuleType]=None) -> HMAC: ...
