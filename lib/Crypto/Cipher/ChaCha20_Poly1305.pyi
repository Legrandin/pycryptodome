from typing import Union, Tuple, overload

class ChaCha20Poly1305Cipher:
    nonce: bytes

    def __init__(self, key: bytes | bytearray, nonce: bytes | bytearray) -> None: ...
    def update(self, data: bytes | bytearray) -> None: ...
    @overload
    def encrypt(self, plaintext: bytes | bytearray) -> bytes: ...
    @overload
    def encrypt(self, plaintext: bytes | bytearray, output: Union[bytearray, memoryview]) -> None: ...
    @overload
    def decrypt(self, plaintext: bytes | bytearray) -> bytes: ...
    @overload
    def decrypt(self, plaintext: bytes | bytearray, output: Union[bytearray, memoryview]) -> None: ...
    def digest(self) -> bytes: ...
    def hexdigest(self) -> str: ...
    def verify(self, received_mac_tag: bytes | bytearray) -> None: ...
    def hexverify(self, received_mac_tag: str) -> None: ...
    def encrypt_and_digest(self, plaintext: bytes | bytearray) -> Tuple[bytes, bytes]: ...
    def decrypt_and_verify(self, ciphertext: bytes | bytearray, received_mac_tag: bytes | bytearray) -> bytes: ...

def new(key: bytes | bytearray, nonce: bytes | bytearray | None = ...) -> ChaCha20Poly1305Cipher: ...

block_size: int
key_size: int
