from typing import Tuple, ByteString, Optional, Union, Callable, Generator, Literal

key = Tuple[Tuple[bytes, bytes], ...]
h = Callable[[ByteString], bytes]
sig = Tuple[bytes, ...]

class LamportKey(object):
    def __init__(self, key: key, is_private: bool, h: h, used: bool=False) -> None: ...
    def _sign(self, message: ByteString) -> sig: ...
    def sign(self, message: ByteString) -> sig: ...
    def _verify(self, message: ByteString, signature: sig) -> bool: ...
    def verify(self, message: ByteString, signature) -> bool: ...
    def has_private(self) -> bool: ...
    def publickey(self) -> LamportKey: ...

def generate(bits: int, onewayfunc: Optional[Union[str, h]]="2.16.840.1.101.3.4.2.8")) -> LamportKey: ...
def construct(key: key, is_private: bool, onewayfunc: Optional[Union[str, h]]="2.16.840.1.101.3.4.2.8"), used: bool=False) -> LamportKey: ...
def _s2p(h, key) -> key: ...
def _iterbits(ByteString) -> Generator[Literal[0, 1], None, None]: ...
